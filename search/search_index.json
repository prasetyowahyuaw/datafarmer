{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>\ud83c\udf3e Datafarmer is a random Python package that helps several data workers harvest data efficiently.</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#with-pip-recommended","title":"with pip recommended","text":"<pre><code>pip install git+https://github.com/prasetyowahyuaw/datafarmer.git\n</code></pre> <p>Currently, this python package isn't published as a proper python package yet, hehe \ud83d\ude05. will be coming soon to build this package to the PyPI  ... </p> <p>Tip</p> <p>faster method to install datafarmer through <code>uv</code> <pre><code>uv pip install git+https://github.com/prasetyowahyuaw/datafarmer.git\n</code></pre></p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#io","title":"I/O","text":"<p>this modules can help you to read/write a data with several sources. the current capabilities are:</p>"},{"location":"usage/#read-bigquery","title":"Read BigQuery","text":"<p>return a dataframe by parsing query and the project id only. <pre><code>from datafarmer.io import read_bigquery\n\nquery = \"select * from `project.dataset.table`\"\ndata = read_bigquery(\n    query=query\n    project_id=\"project_id\",\n    return_type=\"pandas\"\n)\n</code></pre> <code>read_bigquery</code> function also can return polars dataframe, just change the <code>return_type</code> value to <code>polars</code>.</p>"},{"location":"usage/#write-bigquery","title":"Write BigQuery","text":"<p>if we have a dataframe and want to store it in the BigQuery table <pre><code>from datafarmer.io import write_bigquery\nimport pandas as pd\n\ndata = pd.DataFrame({\n    \"id\": [1,2,3], \n    \"value\": [\"Belalang Tempur\", \"Soto Lamongan\", \"Kapal Selam\"]\n})\nwrite_bigquery(\n    df=data,\n    project_id=\"project_id\",\n    table_id=\"table_id\",\n    dataset_id=\"dataset_id\",\n    mode=\"WRITE_TRUNCATE\"\n)\n</code></pre></p>"},{"location":"usage/#read-text","title":"Read Text","text":"<p>return string value from file reading result <pre><code>from datafarmer.io import read_file\n\nprompt = read_file(\"folder/prompt.txt\")\n</code></pre></p>"},{"location":"usage/#read-yaml","title":"Read Yaml","text":"<p>return dictionary value from yaml file  <pre><code>from datafarmer.io import read_yaml\n\nsetup = read_yaml(\"folder/setup.yml)\n</code></pre></p>"},{"location":"usage/#llm","title":"LLM","text":"<p>this module contains LLM wrapper, and still for google gemini only, for others will be coming soon. mostly the usage from this modules is to do asynchronous generation given by a dataframe.</p>"},{"location":"usage/#generating-from-dataframe","title":"Generating from Dataframe","text":"<pre><code>from datafarmer.llm import Gemini\n\ngemini = Gemini(project_id=\"project_id\", gemini_version=\"gemini-2.0-flash\")\ndata = DataFrame({\n    \"prompt\": [\n        \"how to make a cake\",\n        \"what is the education system in india\",\n        \"explain the concept of gravity\",\n    ],\n    \"id\": [\"A\", \"B\", \"C\"],\n})\n\nresult = gemini.generate_from_dataframe(data)\n</code></pre> <p>by default the <code>Gemini</code> class uses vertex-ai sdk. alternatively you can also use <code>google-genai</code> new sdk by modified the parameter. New <code>google-genai</code> sdk have multiples capabilities, can be checked in here.</p> <pre><code>from datafarmer.llm import Gemini\nfrom google.genai.types import GenerateContentConfig\nfrom pydantic import BaseModel\n\nclass SampleResponse(BaseModel):\n    name: str\n    age: int\n    address: str\n\ngemini = Gemini(\n    project_id=PROJECT_ID, \n    google_sdk_version=\"genai\", \n    gemini_version=\"gemini-2.0-flash\",\n)\n\ndata = DataFrame(\n    {\n        \"prompt\": [\n            \"please generate the json response with name, age, and address from the following context. Context: John is a 25 year old software engineer living in New York.\",\n            \"please generate the json response with name, age, and address from the following context. Context: Alice is a 30 year old doctor living in Los Angeles.\",\n            \"please generate the json response with name, age, and address from the following context. Context: Bob is a 28 year old artist living in San Francisco.\",\n        ],\n        \"id\": [\"A\", \"B\", \"C\"],\n    }\n)\n\nresult = gemini.generate_from_dataframe(\n    data,\n    generation_config=GenerateContentConfig(\n        response_mime_type=\"application/json\",\n        response_schema=SampleResponse\n    )\n)\n</code></pre>"},{"location":"usage/#utils","title":"Utils","text":"<p>\ud83d\ude05 coming soon ...</p>"},{"location":"usage/#analysis","title":"Analysis","text":"<p>\ud83d\ude05 coming soon ...</p>"}]}